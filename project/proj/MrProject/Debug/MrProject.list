
MrProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f8  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003284  08003284  00004284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032cc  080032cc  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080032cc  080032cc  000042cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032d4  080032d4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032d4  080032d4  000042d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032d8  080032d8  000042d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080032dc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  2000000c  080032e8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080032e8  00005188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da4d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bdc  00000000  00000000  00012a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00014668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2d  00000000  00000000  00015378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020582  00000000  00000000  00015da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e832  00000000  00000000  00036327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8871  00000000  00000000  00044b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d3ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a0  00000000  00000000  0010d410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008c  00000000  00000000  00110ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800326c 	.word	0x0800326c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800326c 	.word	0x0800326c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fae8 	bl	8000ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f83d 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f923 	bl	8000750 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f8f1 	bl	80006f0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800050e:	f000 f8bf 	bl	8000690 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8000512:	f000 f897 	bl	8000644 <MX_TIM16_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  HAL_TIM_Base_Start(&htim16);
 8000516:	4817      	ldr	r0, [pc, #92]	@ (8000574 <main+0x7c>)
 8000518:	f001 ffd8 	bl	80024cc <HAL_TIM_Base_Start>
	  	  uint8_t transmit_number = 100;
 800051c:	2364      	movs	r3, #100	@ 0x64
 800051e:	71fb      	strb	r3, [r7, #7]
	  	  uint8_t false = 50;
 8000520:	2332      	movs	r3, #50	@ 0x32
 8000522:	71bb      	strb	r3, [r7, #6]
	  	  uint8_t number ;
	      uint8_t specialNumber = 83;
 8000524:	2353      	movs	r3, #83	@ 0x53
 8000526:	717b      	strb	r3, [r7, #5]
	      while(1){
			  HAL_UART_Receive(&huart1, &number, sizeof(uint8_t), 100);
 8000528:	1d39      	adds	r1, r7, #4
 800052a:	2364      	movs	r3, #100	@ 0x64
 800052c:	2201      	movs	r2, #1
 800052e:	4812      	ldr	r0, [pc, #72]	@ (8000578 <main+0x80>)
 8000530:	f002 f95f 	bl	80027f2 <HAL_UART_Receive>
//			  HAL_UART_Transmit(&huart2, &number, sizeof(uint8_t), 100);
//		      HAL_Delay(10);

			  if (number == specialNumber){
 8000534:	793b      	ldrb	r3, [r7, #4]
 8000536:	797a      	ldrb	r2, [r7, #5]
 8000538:	429a      	cmp	r2, r3
 800053a:	d115      	bne.n	8000568 <main+0x70>


				  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	2108      	movs	r1, #8
 8000540:	480e      	ldr	r0, [pc, #56]	@ (800057c <main+0x84>)
 8000542:	f000 fdaf 	bl	80010a4 <HAL_GPIO_WritePin>
//					  HAL_UART_Transmit(&huart2, &transmit_number, sizeof(number), 100);
//
//
//				  }

				  HAL_Delay(250);
 8000546:	20fa      	movs	r0, #250	@ 0xfa
 8000548:	f000 fb38 	bl	8000bbc <HAL_Delay>
				  HAL_UART_Transmit(&huart1, &number, sizeof(uint8_t), 100);
 800054c:	1d39      	adds	r1, r7, #4
 800054e:	2364      	movs	r3, #100	@ 0x64
 8000550:	2201      	movs	r2, #1
 8000552:	4809      	ldr	r0, [pc, #36]	@ (8000578 <main+0x80>)
 8000554:	f002 f8c4 	bl	80026e0 <HAL_UART_Transmit>
				  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 8000558:	2200      	movs	r2, #0
 800055a:	2108      	movs	r1, #8
 800055c:	4807      	ldr	r0, [pc, #28]	@ (800057c <main+0x84>)
 800055e:	f000 fda1 	bl	80010a4 <HAL_GPIO_WritePin>
				  number = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	713b      	strb	r3, [r7, #4]
 8000566:	e7df      	b.n	8000528 <main+0x30>
			  }
			  else{
			  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2108      	movs	r1, #8
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <main+0x84>)
 800056e:	f000 fd99 	bl	80010a4 <HAL_GPIO_WritePin>
			  HAL_UART_Receive(&huart1, &number, sizeof(uint8_t), 100);
 8000572:	e7d9      	b.n	8000528 <main+0x30>
 8000574:	20000028 	.word	0x20000028
 8000578:	20000074 	.word	0x20000074
 800057c:	48000400 	.word	0x48000400

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	@ 0x58
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2244      	movs	r2, #68	@ 0x44
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f002 fe3f 	bl	8003212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	463b      	mov	r3, r7
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a6:	f000 fdb3 	bl	8001110 <HAL_PWREx_ControlVoltageScaling>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b0:	f000 f930 	bl	8000814 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f000 fd8e 	bl	80010d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b8:	4b21      	ldr	r3, [pc, #132]	@ (8000640 <SystemClock_Config+0xc0>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80005be:	4a20      	ldr	r2, [pc, #128]	@ (8000640 <SystemClock_Config+0xc0>)
 80005c0:	f023 0318 	bic.w	r3, r3, #24
 80005c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c8:	2314      	movs	r3, #20
 80005ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005d8:	2360      	movs	r3, #96	@ 0x60
 80005da:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e0:	2301      	movs	r3, #1
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e4:	2301      	movs	r3, #1
 80005e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ec:	2307      	movs	r3, #7
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 fddd 	bl	80011bc <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000608:	f000 f904 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2303      	movs	r3, #3
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2101      	movs	r1, #1
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f9dd 	bl	80019e4 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000630:	f000 f8f0 	bl	8000814 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000634:	f001 fdf0 	bl	8002218 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000638:	bf00      	nop
 800063a:	3758      	adds	r7, #88	@ 0x58
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40021000 	.word	0x40021000

08000644 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_TIM16_Init+0x44>)
 800064a:	4a10      	ldr	r2, [pc, #64]	@ (800068c <MX_TIM16_Init+0x48>)
 800064c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 31;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_TIM16_Init+0x44>)
 8000650:	221f      	movs	r2, #31
 8000652:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_TIM16_Init+0x44>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_TIM16_Init+0x44>)
 800065c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000660:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_TIM16_Init+0x44>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_TIM16_Init+0x44>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_TIM16_Init+0x44>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_TIM16_Init+0x44>)
 8000676:	f001 fed1 	bl	800241c <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000680:	f000 f8c8 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000028 	.word	0x20000028
 800068c:	40014400 	.word	0x40014400

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	@ (80006ec <MX_USART1_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USART1_UART_Init+0x58>)
 80006d4:	f001 ffb6 	bl	8002644 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f899 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000074 	.word	0x20000074
 80006ec:	40013800 	.word	0x40013800

080006f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 80006f6:	4a15      	ldr	r2, [pc, #84]	@ (800074c <MX_USART2_UART_Init+0x5c>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006fa:	4b13      	ldr	r3, [pc, #76]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b09      	ldr	r3, [pc, #36]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000726:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b06      	ldr	r3, [pc, #24]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_USART2_UART_Init+0x58>)
 8000734:	f001 ff86 	bl	8002644 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073e:	f000 f869 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000fc 	.word	0x200000fc
 800074c:	40004400 	.word	0x40004400

08000750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b088      	sub	sp, #32
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <MX_GPIO_Init+0xbc>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076a:	4a28      	ldr	r2, [pc, #160]	@ (800080c <MX_GPIO_Init+0xbc>)
 800076c:	f043 0304 	orr.w	r3, r3, #4
 8000770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000772:	4b26      	ldr	r3, [pc, #152]	@ (800080c <MX_GPIO_Init+0xbc>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000776:	f003 0304 	and.w	r3, r3, #4
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b23      	ldr	r3, [pc, #140]	@ (800080c <MX_GPIO_Init+0xbc>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000782:	4a22      	ldr	r2, [pc, #136]	@ (800080c <MX_GPIO_Init+0xbc>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <MX_GPIO_Init+0xbc>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_GPIO_Init+0xbc>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079a:	4a1c      	ldr	r2, [pc, #112]	@ (800080c <MX_GPIO_Init+0xbc>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007a2:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_GPIO_Init+0xbc>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f000 fc74 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_GPIO_Port, GREEN_Pin, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2108      	movs	r1, #8
 80007c0:	4813      	ldr	r0, [pc, #76]	@ (8000810 <MX_GPIO_Init+0xc0>)
 80007c2:	f000 fc6f 	bl	80010a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 80007c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007e2:	f000 faf5 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_Pin */
  GPIO_InitStruct.Pin = GREEN_Pin;
 80007e6:	2308      	movs	r3, #8
 80007e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ea:	2301      	movs	r3, #1
 80007ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_GPIO_Init+0xc0>)
 80007fe:	f000 fae7 	bl	8000dd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	3720      	adds	r7, #32
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000
 8000810:	48000400 	.word	0x48000400

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <HAL_MspInit+0x44>)
 8000828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800082a:	4a0e      	ldr	r2, [pc, #56]	@ (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6613      	str	r3, [r2, #96]	@ 0x60
 8000832:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <HAL_MspInit+0x44>)
 8000834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_MspInit+0x44>)
 8000840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <HAL_MspInit+0x44>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000848:	6593      	str	r3, [r2, #88]	@ 0x58
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_MspInit+0x44>)
 800084c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800084e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <HAL_TIM_Base_MspInit+0x38>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10b      	bne.n	8000892 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	@ (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800087e:	4a09      	ldr	r2, [pc, #36]	@ (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000884:	6613      	str	r3, [r2, #96]	@ 0x60
 8000886:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <HAL_TIM_Base_MspInit+0x3c>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40014400 	.word	0x40014400
 80008a4:	40021000 	.word	0x40021000

080008a8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0a0      	sub	sp, #128	@ 0x80
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	f107 0318 	add.w	r3, r7, #24
 80008c4:	2254      	movs	r2, #84	@ 0x54
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fca2 	bl	8003212 <memset>
  if(huart->Instance==USART1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a47      	ldr	r2, [pc, #284]	@ (80009f0 <HAL_UART_MspInit+0x148>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d138      	bne.n	800094a <HAL_UART_MspInit+0xa2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008d8:	2301      	movs	r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008dc:	2300      	movs	r3, #0
 80008de:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 faa1 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f0:	f7ff ff90 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008f4:	4b3f      	ldr	r3, [pc, #252]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 80008f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f8:	4a3e      	ldr	r2, [pc, #248]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000900:	4b3c      	ldr	r3, [pc, #240]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 8000902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000904:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b39      	ldr	r3, [pc, #228]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000910:	4a38      	ldr	r2, [pc, #224]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 800091a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000924:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000928:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	2302      	movs	r3, #2
 800092c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000936:	2307      	movs	r3, #7
 8000938:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800093e:	4619      	mov	r1, r3
 8000940:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000944:	f000 fa44 	bl	8000dd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000948:	e04d      	b.n	80009e6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a2a      	ldr	r2, [pc, #168]	@ (80009f8 <HAL_UART_MspInit+0x150>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d148      	bne.n	80009e6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000958:	2300      	movs	r3, #0
 800095a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095c:	f107 0318 	add.w	r3, r7, #24
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fa63 	bl	8001e2c <HAL_RCCEx_PeriphCLKConfig>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800096c:	f7ff ff52 	bl	8000814 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000970:	4b20      	ldr	r3, [pc, #128]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 8000972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000974:	4a1f      	ldr	r2, [pc, #124]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 8000976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800097a:	6593      	str	r3, [r2, #88]	@ 0x58
 800097c:	4b1d      	ldr	r3, [pc, #116]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 800097e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000988:	4b1a      	ldr	r3, [pc, #104]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098c:	4a19      	ldr	r2, [pc, #100]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 800098e:	f043 0301 	orr.w	r3, r3, #1
 8000992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <HAL_UART_MspInit+0x14c>)
 8000996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009a0:	2304      	movs	r3, #4
 80009a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b0:	2307      	movs	r3, #7
 80009b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009b8:	4619      	mov	r1, r3
 80009ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009be:	f000 fa07 	bl	8000dd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009d4:	2303      	movs	r3, #3
 80009d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f000 f9f5 	bl	8000dd0 <HAL_GPIO_Init>
}
 80009e6:	bf00      	nop
 80009e8:	3780      	adds	r7, #128	@ 0x80
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40013800 	.word	0x40013800
 80009f4:	40021000 	.word	0x40021000
 80009f8:	40004400 	.word	0x40004400

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <NMI_Handler+0x4>

08000a04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <MemManage_Handler+0x4>

08000a14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <BusFault_Handler+0x4>

08000a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <UsageFault_Handler+0x4>

08000a24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a52:	f000 f893 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopForever+0xe>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopForever+0x16>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 fbb9 	bl	8003224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ab2:	f7ff fd21 	bl	80004f8 <main>

08000ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ab6:	e7fe      	b.n	8000ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac4:	080032dc 	.word	0x080032dc
  ldr r2, =_sbss
 8000ac8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000acc:	20000188 	.word	0x20000188

08000ad0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC1_IRQHandler>

08000ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f943 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f80e 	bl	8000b04 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e001      	b.n	8000af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000af4:	f7ff fe94 	bl	8000820 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000af8:	79fb      	ldrb	r3, [r7, #7]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d023      	beq.n	8000b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b18:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <HAL_InitTick+0x70>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <HAL_InitTick+0x6c>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4619      	mov	r1, r3
 8000b22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 f941 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d10f      	bne.n	8000b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	d809      	bhi.n	8000b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b40:	2200      	movs	r2, #0
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295
 8000b48:	f000 f919 	bl	8000d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <HAL_InitTick+0x74>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6013      	str	r3, [r2, #0]
 8000b52:	e007      	b.n	8000b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	e004      	b.n	8000b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	73fb      	strb	r3, [r7, #15]
 8000b5e:	e001      	b.n	8000b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000008 	.word	0x20000008
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000004 	.word	0x20000004

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000184 	.word	0x20000184

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000184 	.word	0x20000184

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	@ (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	@ (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	@ (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	@ 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff47 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff5c 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <__NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffb0 	bl	8000d24 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dde:	e148      	b.n	8001072 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	2101      	movs	r1, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 813a 	beq.w	800106c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d005      	beq.n	8000e10 <HAL_GPIO_Init+0x40>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d130      	bne.n	8000e72 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e46:	2201      	movs	r2, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	f003 0201 	and.w	r2, r3, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d017      	beq.n	8000eae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d123      	bne.n	8000f02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	220f      	movs	r2, #15
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	691a      	ldr	r2, [r3, #16]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	6939      	ldr	r1, [r7, #16]
 8000efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0203 	and.w	r2, r3, #3
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8094 	beq.w	800106c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f44:	4b52      	ldr	r3, [pc, #328]	@ (8001090 <HAL_GPIO_Init+0x2c0>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f48:	4a51      	ldr	r2, [pc, #324]	@ (8001090 <HAL_GPIO_Init+0x2c0>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f50:	4b4f      	ldr	r3, [pc, #316]	@ (8001090 <HAL_GPIO_Init+0x2c0>)
 8000f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001094 <HAL_GPIO_Init+0x2c4>)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	220f      	movs	r2, #15
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f86:	d00d      	beq.n	8000fa4 <HAL_GPIO_Init+0x1d4>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a43      	ldr	r2, [pc, #268]	@ (8001098 <HAL_GPIO_Init+0x2c8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d007      	beq.n	8000fa0 <HAL_GPIO_Init+0x1d0>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a42      	ldr	r2, [pc, #264]	@ (800109c <HAL_GPIO_Init+0x2cc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d101      	bne.n	8000f9c <HAL_GPIO_Init+0x1cc>
 8000f98:	2302      	movs	r3, #2
 8000f9a:	e004      	b.n	8000fa6 <HAL_GPIO_Init+0x1d6>
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	e002      	b.n	8000fa6 <HAL_GPIO_Init+0x1d6>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <HAL_GPIO_Init+0x1d6>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	f002 0203 	and.w	r2, r2, #3
 8000fac:	0092      	lsls	r2, r2, #2
 8000fae:	4093      	lsls	r3, r2
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb6:	4937      	ldr	r1, [pc, #220]	@ (8001094 <HAL_GPIO_Init+0x2c4>)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fc4:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000ff0:	68db      	ldr	r3, [r3, #12]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001012:	4a23      	ldr	r2, [pc, #140]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	43db      	mvns	r3, r3
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	4013      	ands	r3, r2
 8001026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800103c:	4a18      	ldr	r2, [pc, #96]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001042:	4b17      	ldr	r3, [pc, #92]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001066:	4a0e      	ldr	r2, [pc, #56]	@ (80010a0 <HAL_GPIO_Init+0x2d0>)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3301      	adds	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	fa22 f303 	lsr.w	r3, r2, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	f47f aeaf 	bne.w	8000de0 <HAL_GPIO_Init+0x10>
  }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	40010400 	.word	0x40010400

080010a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	807b      	strh	r3, [r7, #2]
 80010b0:	4613      	mov	r3, r2
 80010b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010c2:	887a      	ldrh	r2, [r7, #2]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a04      	ldr	r2, [pc, #16]	@ (80010f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40007000 	.word	0x40007000

080010f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010f8:	4b04      	ldr	r3, [pc, #16]	@ (800110c <HAL_PWREx_GetVoltageRange+0x18>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800111e:	d130      	bne.n	8001182 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001120:	4b23      	ldr	r3, [pc, #140]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800112c:	d038      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001136:	4a1e      	ldr	r2, [pc, #120]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800113c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800113e:	4b1d      	ldr	r3, [pc, #116]	@ (80011b4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	2232      	movs	r2, #50	@ 0x32
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	4a1b      	ldr	r2, [pc, #108]	@ (80011b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9b      	lsrs	r3, r3, #18
 8001150:	3301      	adds	r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001154:	e002      	b.n	800115c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800115c:	4b14      	ldr	r3, [pc, #80]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001168:	d102      	bne.n	8001170 <HAL_PWREx_ControlVoltageScaling+0x60>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1f2      	bne.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001170:	4b0f      	ldr	r3, [pc, #60]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001172:	695b      	ldr	r3, [r3, #20]
 8001174:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001178:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800117c:	d110      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e00f      	b.n	80011a2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001182:	4b0b      	ldr	r3, [pc, #44]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800118a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800118e:	d007      	beq.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001190:	4b07      	ldr	r3, [pc, #28]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001198:	4a05      	ldr	r2, [pc, #20]	@ (80011b0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40007000 	.word	0x40007000
 80011b4:	20000000 	.word	0x20000000
 80011b8:	431bde83 	.word	0x431bde83

080011bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	f000 bc02 	b.w	80019d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011d0:	4b96      	ldr	r3, [pc, #600]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011da:	4b94      	ldr	r3, [pc, #592]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80e4 	beq.w	80013ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <HAL_RCC_OscConfig+0x4c>
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	f040 808b 	bne.w	8001316 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2b01      	cmp	r3, #1
 8001204:	f040 8087 	bne.w	8001316 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001208:	4b88      	ldr	r3, [pc, #544]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_OscConfig+0x64>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e3d9      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1a      	ldr	r2, [r3, #32]
 8001224:	4b81      	ldr	r3, [pc, #516]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	2b00      	cmp	r3, #0
 800122e:	d004      	beq.n	800123a <HAL_RCC_OscConfig+0x7e>
 8001230:	4b7e      	ldr	r3, [pc, #504]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001238:	e005      	b.n	8001246 <HAL_RCC_OscConfig+0x8a>
 800123a:	4b7c      	ldr	r3, [pc, #496]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800123c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001246:	4293      	cmp	r3, r2
 8001248:	d223      	bcs.n	8001292 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fd8c 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e3ba      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125e:	4b73      	ldr	r3, [pc, #460]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a72      	ldr	r2, [pc, #456]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b70      	ldr	r3, [pc, #448]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	496d      	ldr	r1, [pc, #436]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127c:	4b6b      	ldr	r3, [pc, #428]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	4968      	ldr	r1, [pc, #416]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800128c:	4313      	orrs	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
 8001290:	e025      	b.n	80012de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001292:	4b66      	ldr	r3, [pc, #408]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a65      	ldr	r2, [pc, #404]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b63      	ldr	r3, [pc, #396]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a1b      	ldr	r3, [r3, #32]
 80012aa:	4960      	ldr	r1, [pc, #384]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012b0:	4b5e      	ldr	r3, [pc, #376]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69db      	ldr	r3, [r3, #28]
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	495b      	ldr	r1, [pc, #364]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d109      	bne.n	80012de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a1b      	ldr	r3, [r3, #32]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fd4c 	bl	8001d6c <RCC_SetFlashLatencyFromMSIRange>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e37a      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012de:	f000 fc81 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b51      	ldr	r3, [pc, #324]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	4950      	ldr	r1, [pc, #320]	@ (8001430 <HAL_RCC_OscConfig+0x274>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <HAL_RCC_OscConfig+0x278>)
 80012fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001438 <HAL_RCC_OscConfig+0x27c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fbfe 	bl	8000b04 <HAL_InitTick>
 8001308:	4603      	mov	r3, r0
 800130a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d052      	beq.n	80013b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	e35e      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d032      	beq.n	8001384 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800131e:	4b43      	ldr	r3, [pc, #268]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a42      	ldr	r2, [pc, #264]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132a:	f7ff fc3b 	bl	8000ba4 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001332:	f7ff fc37 	bl	8000ba4 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e347      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001344:	4b39      	ldr	r3, [pc, #228]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001350:	4b36      	ldr	r3, [pc, #216]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a35      	ldr	r2, [pc, #212]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001356:	f043 0308 	orr.w	r3, r3, #8
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b33      	ldr	r3, [pc, #204]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	4930      	ldr	r1, [pc, #192]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800136a:	4313      	orrs	r3, r2
 800136c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800136e:	4b2f      	ldr	r3, [pc, #188]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	492b      	ldr	r1, [pc, #172]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
 8001382:	e01a      	b.n	80013ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a28      	ldr	r2, [pc, #160]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001390:	f7ff fc08 	bl	8000ba4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001398:	f7ff fc04 	bl	8000ba4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e314      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x1dc>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d073      	beq.n	80014ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b08      	cmp	r3, #8
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x21c>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d10e      	bne.n	80013f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d10b      	bne.n	80013f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d063      	beq.n	80014ac <HAL_RCC_OscConfig+0x2f0>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d15f      	bne.n	80014ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e2f1      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013f8:	d106      	bne.n	8001408 <HAL_RCC_OscConfig+0x24c>
 80013fa:	4b0c      	ldr	r3, [pc, #48]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a0b      	ldr	r2, [pc, #44]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e025      	b.n	8001454 <HAL_RCC_OscConfig+0x298>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001410:	d114      	bne.n	800143c <HAL_RCC_OscConfig+0x280>
 8001412:	4b06      	ldr	r3, [pc, #24]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a05      	ldr	r2, [pc, #20]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b03      	ldr	r3, [pc, #12]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a02      	ldr	r2, [pc, #8]	@ (800142c <HAL_RCC_OscConfig+0x270>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e013      	b.n	8001454 <HAL_RCC_OscConfig+0x298>
 800142c:	40021000 	.word	0x40021000
 8001430:	08003284 	.word	0x08003284
 8001434:	20000000 	.word	0x20000000
 8001438:	20000004 	.word	0x20000004
 800143c:	4ba0      	ldr	r3, [pc, #640]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a9f      	ldr	r2, [pc, #636]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b9d      	ldr	r3, [pc, #628]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a9c      	ldr	r2, [pc, #624]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fba2 	bl	8000ba4 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fb9e 	bl	8000ba4 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	@ 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e2ae      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001476:	4b92      	ldr	r3, [pc, #584]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x2a8>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fb8e 	bl	8000ba4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fb8a 	bl	8000ba4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e29a      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800149e:	4b88      	ldr	r3, [pc, #544]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x2d0>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d060      	beq.n	800157c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d005      	beq.n	80014cc <HAL_RCC_OscConfig+0x310>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	d119      	bne.n	80014fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d116      	bne.n	80014fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014cc:	4b7c      	ldr	r3, [pc, #496]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x328>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e277      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b76      	ldr	r3, [pc, #472]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	4973      	ldr	r1, [pc, #460]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f8:	e040      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d023      	beq.n	800154a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001502:	4b6f      	ldr	r3, [pc, #444]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a6e      	ldr	r2, [pc, #440]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001508:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150e:	f7ff fb49 	bl	8000ba4 <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff fb45 	bl	8000ba4 <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e255      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001528:	4b65      	ldr	r3, [pc, #404]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b62      	ldr	r3, [pc, #392]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	495f      	ldr	r1, [pc, #380]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b5d      	ldr	r3, [pc, #372]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a5c      	ldr	r2, [pc, #368]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001550:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb25 	bl	8000ba4 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fb21 	bl	8000ba4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e231      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001570:	4b53      	ldr	r3, [pc, #332]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0308 	and.w	r3, r3, #8
 8001584:	2b00      	cmp	r3, #0
 8001586:	d03c      	beq.n	8001602 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01c      	beq.n	80015ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001590:	4b4b      	ldr	r3, [pc, #300]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001592:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001596:	4a4a      	ldr	r2, [pc, #296]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb00 	bl	8000ba4 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a8:	f7ff fafc 	bl	8000ba4 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e20c      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ba:	4b41      	ldr	r3, [pc, #260]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ef      	beq.n	80015a8 <HAL_RCC_OscConfig+0x3ec>
 80015c8:	e01b      	b.n	8001602 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b3d      	ldr	r3, [pc, #244]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d0:	4a3b      	ldr	r2, [pc, #236]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015da:	f7ff fae3 	bl	8000ba4 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fadf 	bl	8000ba4 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e1ef      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015f4:	4b32      	ldr	r3, [pc, #200]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ef      	bne.n	80015e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80a6 	beq.w	800175c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001614:	4b2a      	ldr	r3, [pc, #168]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	4b27      	ldr	r3, [pc, #156]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001624:	4a26      	ldr	r2, [pc, #152]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162a:	6593      	str	r3, [r2, #88]	@ 0x58
 800162c:	4b24      	ldr	r3, [pc, #144]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800162e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001638:	2301      	movs	r3, #1
 800163a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163c:	4b21      	ldr	r3, [pc, #132]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001644:	2b00      	cmp	r3, #0
 8001646:	d118      	bne.n	800167a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001648:	4b1e      	ldr	r3, [pc, #120]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a1d      	ldr	r2, [pc, #116]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 800164e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001654:	f7ff faa6 	bl	8000ba4 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165c:	f7ff faa2 	bl	8000ba4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1b2      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166e:	4b15      	ldr	r3, [pc, #84]	@ (80016c4 <HAL_RCC_OscConfig+0x508>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x4d8>
 8001682:	4b0f      	ldr	r3, [pc, #60]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 8001684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001688:	4a0d      	ldr	r2, [pc, #52]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001692:	e029      	b.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d115      	bne.n	80016c8 <HAL_RCC_OscConfig+0x50c>
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 800169e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a2:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b2:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016bc:	e014      	b.n	80016e8 <HAL_RCC_OscConfig+0x52c>
 80016be:	bf00      	nop
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
 80016c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80016ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ce:	4a99      	ldr	r2, [pc, #612]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016d8:	4b96      	ldr	r3, [pc, #600]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80016da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016de:	4a95      	ldr	r2, [pc, #596]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80016e0:	f023 0304 	bic.w	r3, r3, #4
 80016e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d016      	beq.n	800171e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f0:	f7ff fa58 	bl	8000ba4 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f6:	e00a      	b.n	800170e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f8:	f7ff fa54 	bl	8000ba4 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e162      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800170e:	4b89      	ldr	r3, [pc, #548]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0ed      	beq.n	80016f8 <HAL_RCC_OscConfig+0x53c>
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171e:	f7ff fa41 	bl	8000ba4 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001724:	e00a      	b.n	800173c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001726:	f7ff fa3d 	bl	8000ba4 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001734:	4293      	cmp	r3, r2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e14b      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800173c:	4b7d      	ldr	r3, [pc, #500]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 800173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1ed      	bne.n	8001726 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174a:	7ffb      	ldrb	r3, [r7, #31]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d105      	bne.n	800175c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001750:	4b78      	ldr	r3, [pc, #480]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001754:	4a77      	ldr	r2, [pc, #476]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001756:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800175a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0320 	and.w	r3, r3, #32
 8001764:	2b00      	cmp	r3, #0
 8001766:	d03c      	beq.n	80017e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176c:	2b00      	cmp	r3, #0
 800176e:	d01c      	beq.n	80017aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001770:	4b70      	ldr	r3, [pc, #448]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001772:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001776:	4a6f      	ldr	r2, [pc, #444]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fa10 	bl	8000ba4 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001788:	f7ff fa0c 	bl	8000ba4 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e11c      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800179a:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 800179c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ef      	beq.n	8001788 <HAL_RCC_OscConfig+0x5cc>
 80017a8:	e01b      	b.n	80017e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017aa:	4b62      	ldr	r3, [pc, #392]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80017ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017b0:	4a60      	ldr	r2, [pc, #384]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80017b2:	f023 0301 	bic.w	r3, r3, #1
 80017b6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ba:	f7ff f9f3 	bl	8000ba4 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c2:	f7ff f9ef 	bl	8000ba4 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e0ff      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017d4:	4b57      	ldr	r3, [pc, #348]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80017d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1ef      	bne.n	80017c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f000 80f3 	beq.w	80019d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	f040 80c9 	bne.w	8001988 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 0203 	and.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	429a      	cmp	r2, r3
 8001808:	d12c      	bne.n	8001864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	3b01      	subs	r3, #1
 8001816:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001818:	429a      	cmp	r2, r3
 800181a:	d123      	bne.n	8001864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001826:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d11b      	bne.n	8001864 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001836:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d113      	bne.n	8001864 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001846:	085b      	lsrs	r3, r3, #1
 8001848:	3b01      	subs	r3, #1
 800184a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800184c:	429a      	cmp	r2, r3
 800184e:	d109      	bne.n	8001864 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	085b      	lsrs	r3, r3, #1
 800185c:	3b01      	subs	r3, #1
 800185e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d06b      	beq.n	800193c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	2b0c      	cmp	r3, #12
 8001868:	d062      	beq.n	8001930 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800186a:	4b32      	ldr	r3, [pc, #200]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0ac      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800187a:	4b2e      	ldr	r3, [pc, #184]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a2d      	ldr	r2, [pc, #180]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001880:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001884:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001886:	f7ff f98d 	bl	8000ba4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff f989 	bl	8000ba4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e099      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	4b21      	ldr	r3, [pc, #132]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018ae:	68da      	ldr	r2, [r3, #12]
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <HAL_RCC_OscConfig+0x77c>)
 80018b2:	4013      	ands	r3, r2
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018bc:	3a01      	subs	r2, #1
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	4311      	orrs	r1, r2
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018c6:	0212      	lsls	r2, r2, #8
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018ce:	0852      	lsrs	r2, r2, #1
 80018d0:	3a01      	subs	r2, #1
 80018d2:	0552      	lsls	r2, r2, #21
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018da:	0852      	lsrs	r2, r2, #1
 80018dc:	3a01      	subs	r2, #1
 80018de:	0652      	lsls	r2, r2, #25
 80018e0:	4311      	orrs	r1, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018e6:	06d2      	lsls	r2, r2, #27
 80018e8:	430a      	orrs	r2, r1
 80018ea:	4912      	ldr	r1, [pc, #72]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018f0:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0f      	ldr	r2, [pc, #60]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a0c      	ldr	r2, [pc, #48]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001908:	f7ff f94c 	bl	8000ba4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f948 	bl	8000ba4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e058      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001922:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <HAL_RCC_OscConfig+0x778>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800192e:	e050      	b.n	80019d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e04f      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
 8001934:	40021000 	.word	0x40021000
 8001938:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d144      	bne.n	80019d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a23      	ldr	r2, [pc, #140]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 800194e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001954:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4a20      	ldr	r2, [pc, #128]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 800195a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800195e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001960:	f7ff f920 	bl	8000ba4 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff f91c 	bl	8000ba4 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e02c      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0x7ac>
 8001986:	e024      	b.n	80019d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b0c      	cmp	r3, #12
 800198c:	d01f      	beq.n	80019ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 8001994:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff f903 	bl	8000ba4 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a2:	f7ff f8ff 	bl	8000ba4 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e00f      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4905      	ldr	r1, [pc, #20]	@ (80019dc <HAL_RCC_OscConfig+0x820>)
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_RCC_OscConfig+0x824>)
 80019c8:	4013      	ands	r3, r2
 80019ca:	60cb      	str	r3, [r1, #12]
 80019cc:	e001      	b.n	80019d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	feeefffc 	.word	0xfeeefffc

080019e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e0e7      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b75      	ldr	r3, [pc, #468]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d910      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b72      	ldr	r3, [pc, #456]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4970      	ldr	r1, [pc, #448]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b6e      	ldr	r3, [pc, #440]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0cf      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	4b66      	ldr	r3, [pc, #408]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d908      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a44:	4b63      	ldr	r3, [pc, #396]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	4960      	ldr	r1, [pc, #384]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d04c      	beq.n	8001afc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d121      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e0a6      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d107      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a82:	4b54      	ldr	r3, [pc, #336]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d115      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e09a      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a9a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e08e      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e086      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b46      	ldr	r3, [pc, #280]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4943      	ldr	r1, [pc, #268]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001acc:	f7ff f86a 	bl	8000ba4 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff f866 	bl	8000ba4 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e06e      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d010      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d208      	bcs.n	8001b2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	492b      	ldr	r1, [pc, #172]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b2a:	4b29      	ldr	r3, [pc, #164]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d210      	bcs.n	8001b5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	4b25      	ldr	r3, [pc, #148]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 0207 	bic.w	r2, r3, #7
 8001b40:	4923      	ldr	r1, [pc, #140]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b48:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e036      	b.n	8001bc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d008      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4918      	ldr	r1, [pc, #96]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0308 	and.w	r3, r3, #8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4910      	ldr	r1, [pc, #64]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b98:	f000 f824 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	091b      	lsrs	r3, r3, #4
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	490b      	ldr	r1, [pc, #44]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1f4>)
 8001baa:	5ccb      	ldrb	r3, [r1, r3]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb4:	4a09      	ldr	r2, [pc, #36]	@ (8001bdc <HAL_RCC_ClockConfig+0x1f8>)
 8001bb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bb8:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_RCC_ClockConfig+0x1fc>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe ffa1 	bl	8000b04 <HAL_InitTick>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40022000 	.word	0x40022000
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08003284 	.word	0x08003284
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	20000004 	.word	0x20000004

08001be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d005      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	2b0c      	cmp	r3, #12
 8001c10:	d121      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d11e      	bne.n	8001c56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c18:	4b34      	ldr	r3, [pc, #208]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0308 	and.w	r3, r3, #8
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d107      	bne.n	8001c34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c24:	4b31      	ldr	r3, [pc, #196]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e005      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c34:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	091b      	lsrs	r3, r3, #4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c40:	4a2b      	ldr	r2, [pc, #172]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10d      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c54:	e00a      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d102      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e004      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d134      	bne.n	8001cdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c72:	4b1e      	ldr	r3, [pc, #120]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d003      	beq.n	8001c8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d003      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0xac>
 8001c88:	e005      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c8c:	617b      	str	r3, [r7, #20]
      break;
 8001c8e:	e005      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c92:	617b      	str	r3, [r7, #20]
      break;
 8001c94:	e002      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	617b      	str	r3, [r7, #20]
      break;
 8001c9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	0a1b      	lsrs	r3, r3, #8
 8001cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	fb03 f202 	mul.w	r2, r3, r2
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	0e5b      	lsrs	r3, r3, #25
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	3301      	adds	r3, #1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001cdc:	69bb      	ldr	r3, [r7, #24]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3724      	adds	r7, #36	@ 0x24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	0800329c 	.word	0x0800329c
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4904      	ldr	r1, [pc, #16]	@ (8001d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	f003 031f 	and.w	r3, r3, #31
 8001d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	08003294 	.word	0x08003294

08001d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d44:	f7ff ffda 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	0adb      	lsrs	r3, r3, #11
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	4904      	ldr	r1, [pc, #16]	@ (8001d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d56:	5ccb      	ldrb	r3, [r1, r3]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	08003294 	.word	0x08003294

08001d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d84:	f7ff f9b6 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001d88:	6178      	str	r0, [r7, #20]
 8001d8a:	e014      	b.n	8001db6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d90:	4a24      	ldr	r2, [pc, #144]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d98:	4b22      	ldr	r3, [pc, #136]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001da4:	f7ff f9a6 	bl	80010f4 <HAL_PWREx_GetVoltageRange>
 8001da8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001daa:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dae:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dbc:	d10b      	bne.n	8001dd6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b80      	cmp	r3, #128	@ 0x80
 8001dc2:	d919      	bls.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dc8:	d902      	bls.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dca:	2302      	movs	r3, #2
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e013      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	e010      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	@ 0x80
 8001dda:	d902      	bls.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ddc:	2303      	movs	r3, #3
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e00a      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b80      	cmp	r3, #128	@ 0x80
 8001de6:	d102      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de8:	2302      	movs	r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e004      	b.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b70      	cmp	r3, #112	@ 0x70
 8001df2:	d101      	bne.n	8001df8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 0207 	bic.w	r2, r3, #7
 8001e00:	4909      	ldr	r1, [pc, #36]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e08:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d001      	beq.n	8001e1a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e34:	2300      	movs	r3, #0
 8001e36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e38:	2300      	movs	r3, #0
 8001e3a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d031      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e50:	d01a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e56:	d814      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d009      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e60:	d10f      	bne.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e62:	4b5d      	ldr	r3, [pc, #372]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	4a5c      	ldr	r2, [pc, #368]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e6e:	e00c      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f9de 	bl	8002238 <RCCEx_PLLSAI1_Config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e80:	e003      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	74fb      	strb	r3, [r7, #19]
      break;
 8001e86:	e000      	b.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e8a:	7cfb      	ldrb	r3, [r7, #19]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10b      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e90:	4b51      	ldr	r3, [pc, #324]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e9e:	494e      	ldr	r1, [pc, #312]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ea6:	e001      	b.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ea8:	7cfb      	ldrb	r3, [r7, #19]
 8001eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 809e 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ebe:	4b46      	ldr	r3, [pc, #280]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	4b40      	ldr	r3, [pc, #256]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eec:	2301      	movs	r3, #1
 8001eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a39      	ldr	r2, [pc, #228]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001efc:	f7fe fe52 	bl	8000ba4 <HAL_GetTick>
 8001f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f02:	e009      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7fe fe4e 	bl	8000ba4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d902      	bls.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	74fb      	strb	r3, [r7, #19]
        break;
 8001f16:	e005      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f18:	4b30      	ldr	r3, [pc, #192]	@ (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0ef      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f24:	7cfb      	ldrb	r3, [r7, #19]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d15a      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01e      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f40:	697a      	ldr	r2, [r7, #20]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d019      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f46:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f50:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f58:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f62:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f68:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f72:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d016      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7fe fe0e 	bl	8000ba4 <HAL_GetTick>
 8001f88:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8a:	e00b      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8c:	f7fe fe0a 	bl	8000ba4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d902      	bls.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	74fb      	strb	r3, [r7, #19]
            break;
 8001fa2:	e006      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0ec      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001fb2:	7cfb      	ldrb	r3, [r7, #19]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fc6:	4904      	ldr	r1, [pc, #16]	@ (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fce:	e009      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	74bb      	strb	r3, [r7, #18]
 8001fd4:	e006      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7c7b      	ldrb	r3, [r7, #17]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b8a      	ldr	r3, [pc, #552]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fee:	4a89      	ldr	r2, [pc, #548]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ff4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002002:	4b84      	ldr	r3, [pc, #528]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f023 0203 	bic.w	r2, r3, #3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4980      	ldr	r1, [pc, #512]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002024:	4b7b      	ldr	r3, [pc, #492]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f023 020c 	bic.w	r2, r3, #12
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002032:	4978      	ldr	r1, [pc, #480]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002046:	4b73      	ldr	r3, [pc, #460]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	496f      	ldr	r1, [pc, #444]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002068:	4b6a      	ldr	r3, [pc, #424]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002076:	4967      	ldr	r1, [pc, #412]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800208a:	4b62      	ldr	r3, [pc, #392]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002098:	495e      	ldr	r1, [pc, #376]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ac:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ba:	4956      	ldr	r1, [pc, #344]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ce:	4b51      	ldr	r3, [pc, #324]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	494d      	ldr	r1, [pc, #308]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d028      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020f0:	4b48      	ldr	r3, [pc, #288]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	4945      	ldr	r1, [pc, #276]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800210a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800210e:	d106      	bne.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002110:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a3f      	ldr	r2, [pc, #252]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211a:	60d3      	str	r3, [r2, #12]
 800211c:	e011      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002126:	d10c      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3304      	adds	r3, #4
 800212c:	2101      	movs	r1, #1
 800212e:	4618      	mov	r0, r3
 8002130:	f000 f882 	bl	8002238 <RCCEx_PLLSAI1_Config>
 8002134:	4603      	mov	r3, r0
 8002136:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002138:	7cfb      	ldrb	r3, [r7, #19]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d028      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002154:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215c:	492d      	ldr	r1, [pc, #180]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002168:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800216c:	d106      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216e:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	4a28      	ldr	r2, [pc, #160]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002174:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002178:	60d3      	str	r3, [r2, #12]
 800217a:	e011      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3304      	adds	r3, #4
 800218a:	2101      	movs	r1, #1
 800218c:	4618      	mov	r0, r3
 800218e:	f000 f853 	bl	8002238 <RCCEx_PLLSAI1_Config>
 8002192:	4603      	mov	r3, r0
 8002194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002196:	7cfb      	ldrb	r3, [r7, #19]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800219c:	7cfb      	ldrb	r3, [r7, #19]
 800219e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d01c      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ba:	4916      	ldr	r1, [pc, #88]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021ca:	d10c      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	2102      	movs	r1, #2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f830 	bl	8002238 <RCCEx_PLLSAI1_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021dc:	7cfb      	ldrb	r3, [r7, #19]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021e2:	7cfb      	ldrb	r3, [r7, #19]
 80021e4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021f2:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002200:	4904      	ldr	r1, [pc, #16]	@ (8002214 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002208:	7cbb      	ldrb	r3, [r7, #18]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000

08002218 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000

08002238 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002246:	4b74      	ldr	r3, [pc, #464]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002252:	4b71      	ldr	r3, [pc, #452]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0203 	and.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d10d      	bne.n	800227e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
       ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	d009      	beq.n	800227e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800226a:	4b6b      	ldr	r3, [pc, #428]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
       ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d047      	beq.n	800230e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
 8002282:	e044      	b.n	800230e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d018      	beq.n	80022be <RCCEx_PLLSAI1_Config+0x86>
 800228c:	2b03      	cmp	r3, #3
 800228e:	d825      	bhi.n	80022dc <RCCEx_PLLSAI1_Config+0xa4>
 8002290:	2b01      	cmp	r3, #1
 8002292:	d002      	beq.n	800229a <RCCEx_PLLSAI1_Config+0x62>
 8002294:	2b02      	cmp	r3, #2
 8002296:	d009      	beq.n	80022ac <RCCEx_PLLSAI1_Config+0x74>
 8002298:	e020      	b.n	80022dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800229a:	4b5f      	ldr	r3, [pc, #380]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d11d      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022aa:	e01a      	b.n	80022e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d116      	bne.n	80022e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022bc:	e013      	b.n	80022e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022be:	4b56      	ldr	r3, [pc, #344]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10f      	bne.n	80022ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ca:	4b53      	ldr	r3, [pc, #332]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022da:	e006      	b.n	80022ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
      break;
 80022e0:	e004      	b.n	80022ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e2:	bf00      	nop
 80022e4:	e002      	b.n	80022ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e6:	bf00      	nop
 80022e8:	e000      	b.n	80022ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10d      	bne.n	800230e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022f2:	4b49      	ldr	r3, [pc, #292]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6819      	ldr	r1, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	3b01      	subs	r3, #1
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	430b      	orrs	r3, r1
 8002308:	4943      	ldr	r1, [pc, #268]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230a:	4313      	orrs	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d17c      	bne.n	800240e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002314:	4b40      	ldr	r3, [pc, #256]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a3f      	ldr	r2, [pc, #252]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800231a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800231e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7fe fc40 	bl	8000ba4 <HAL_GetTick>
 8002324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002326:	e009      	b.n	800233c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002328:	f7fe fc3c 	bl	8000ba4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d902      	bls.n	800233c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	73fb      	strb	r3, [r7, #15]
        break;
 800233a:	e005      	b.n	8002348 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800233c:	4b36      	ldr	r3, [pc, #216]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1ef      	bne.n	8002328 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d15f      	bne.n	800240e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d110      	bne.n	8002376 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002354:	4b30      	ldr	r3, [pc, #192]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800235c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6892      	ldr	r2, [r2, #8]
 8002364:	0211      	lsls	r1, r2, #8
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68d2      	ldr	r2, [r2, #12]
 800236a:	06d2      	lsls	r2, r2, #27
 800236c:	430a      	orrs	r2, r1
 800236e:	492a      	ldr	r1, [pc, #168]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	610b      	str	r3, [r1, #16]
 8002374:	e027      	b.n	80023c6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d112      	bne.n	80023a2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800237c:	4b26      	ldr	r3, [pc, #152]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002384:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6892      	ldr	r2, [r2, #8]
 800238c:	0211      	lsls	r1, r2, #8
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6912      	ldr	r2, [r2, #16]
 8002392:	0852      	lsrs	r2, r2, #1
 8002394:	3a01      	subs	r2, #1
 8002396:	0552      	lsls	r2, r2, #21
 8002398:	430a      	orrs	r2, r1
 800239a:	491f      	ldr	r1, [pc, #124]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	610b      	str	r3, [r1, #16]
 80023a0:	e011      	b.n	80023c6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023aa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6892      	ldr	r2, [r2, #8]
 80023b2:	0211      	lsls	r1, r2, #8
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6952      	ldr	r2, [r2, #20]
 80023b8:	0852      	lsrs	r2, r2, #1
 80023ba:	3a01      	subs	r2, #1
 80023bc:	0652      	lsls	r2, r2, #25
 80023be:	430a      	orrs	r2, r1
 80023c0:	4915      	ldr	r1, [pc, #84]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a13      	ldr	r2, [pc, #76]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023d0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d2:	f7fe fbe7 	bl	8000ba4 <HAL_GetTick>
 80023d6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d8:	e009      	b.n	80023ee <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023da:	f7fe fbe3 	bl	8000ba4 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d902      	bls.n	80023ee <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	73fb      	strb	r3, [r7, #15]
          break;
 80023ec:	e005      	b.n	80023fa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0ef      	beq.n	80023da <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d106      	bne.n	800240e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4903      	ldr	r1, [pc, #12]	@ (8002418 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e049      	b.n	80024c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fa10 	bl	8000868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2202      	movs	r2, #2
 800244c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f000 f882 	bl	8002564 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e033      	b.n	800254c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a19      	ldr	r2, [pc, #100]	@ (8002558 <HAL_TIM_Base_Start+0x8c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_TIM_Base_Start+0x3e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fe:	d004      	beq.n	800250a <HAL_TIM_Base_Start+0x3e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a15      	ldr	r2, [pc, #84]	@ (800255c <HAL_TIM_Base_Start+0x90>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d115      	bne.n	8002536 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4b13      	ldr	r3, [pc, #76]	@ (8002560 <HAL_TIM_Base_Start+0x94>)
 8002512:	4013      	ands	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b06      	cmp	r3, #6
 800251a:	d015      	beq.n	8002548 <HAL_TIM_Base_Start+0x7c>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002522:	d011      	beq.n	8002548 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002534:	e008      	b.n	8002548 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f042 0201 	orr.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]
 8002546:	e000      	b.n	800254a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002548:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40014000 	.word	0x40014000
 8002560:	00010007 	.word	0x00010007

08002564 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a30      	ldr	r2, [pc, #192]	@ (8002638 <TIM_Base_SetConfig+0xd4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d003      	beq.n	8002584 <TIM_Base_SetConfig+0x20>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002582:	d108      	bne.n	8002596 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800258a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a27      	ldr	r2, [pc, #156]	@ (8002638 <TIM_Base_SetConfig+0xd4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d00b      	beq.n	80025b6 <TIM_Base_SetConfig+0x52>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a4:	d007      	beq.n	80025b6 <TIM_Base_SetConfig+0x52>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a24      	ldr	r2, [pc, #144]	@ (800263c <TIM_Base_SetConfig+0xd8>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d003      	beq.n	80025b6 <TIM_Base_SetConfig+0x52>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a23      	ldr	r2, [pc, #140]	@ (8002640 <TIM_Base_SetConfig+0xdc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d108      	bne.n	80025c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a12      	ldr	r2, [pc, #72]	@ (8002638 <TIM_Base_SetConfig+0xd4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d007      	beq.n	8002604 <TIM_Base_SetConfig+0xa0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a11      	ldr	r2, [pc, #68]	@ (800263c <TIM_Base_SetConfig+0xd8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <TIM_Base_SetConfig+0xa0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a10      	ldr	r2, [pc, #64]	@ (8002640 <TIM_Base_SetConfig+0xdc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d103      	bne.n	800260c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d105      	bne.n	800262a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f023 0201 	bic.w	r2, r3, #1
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	611a      	str	r2, [r3, #16]
  }
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40012c00 	.word	0x40012c00
 800263c:	40014000 	.word	0x40014000
 8002640:	40014400 	.word	0x40014400

08002644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e040      	b.n	80026d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe f91e 	bl	80008a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	@ 0x24
 8002670:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002686:	2b00      	cmp	r3, #0
 8002688:	d002      	beq.n	8002690 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 fba6 	bl	8002ddc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f977 	bl	8002984 <UART_SetConfig>
 8002696:	4603      	mov	r3, r0
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e01b      	b.n	80026d8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 fc25 	bl	8002f20 <UART_CheckIdleState>
 80026d6:	4603      	mov	r3, r0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	@ 0x28
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	4613      	mov	r3, r2
 80026ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026f4:	2b20      	cmp	r3, #32
 80026f6:	d177      	bne.n	80027e8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_UART_Transmit+0x24>
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e070      	b.n	80027ea <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2221      	movs	r2, #33	@ 0x21
 8002714:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002716:	f7fe fa45 	bl	8000ba4 <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002734:	d108      	bne.n	8002748 <HAL_UART_Transmit+0x68>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	e003      	b.n	8002750 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002750:	e02f      	b.n	80027b2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2200      	movs	r2, #0
 800275a:	2180      	movs	r1, #128	@ 0x80
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 fc87 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e03b      	b.n	80027ea <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002784:	b292      	uxth	r2, r2
 8002786:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3302      	adds	r3, #2
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e007      	b.n	80027a0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	3301      	adds	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1c9      	bne.n	8002752 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2200      	movs	r2, #0
 80027c6:	2140      	movs	r1, #64	@ 0x40
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 fc51 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e005      	b.n	80027ea <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2220      	movs	r2, #32
 80027e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b08a      	sub	sp, #40	@ 0x28
 80027f6:	af02      	add	r7, sp, #8
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002808:	2b20      	cmp	r3, #32
 800280a:	f040 80b6 	bne.w	800297a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Receive+0x28>
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0ae      	b.n	800297c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2222      	movs	r2, #34	@ 0x22
 800282a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002834:	f7fe f9b6 	bl	8000ba4 <HAL_GetTick>
 8002838:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002852:	d10e      	bne.n	8002872 <HAL_UART_Receive+0x80>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d105      	bne.n	8002868 <HAL_UART_Receive+0x76>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002862:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002866:	e02d      	b.n	80028c4 <HAL_UART_Receive+0xd2>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	22ff      	movs	r2, #255	@ 0xff
 800286c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002870:	e028      	b.n	80028c4 <HAL_UART_Receive+0xd2>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_UART_Receive+0xa4>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d104      	bne.n	800288c <HAL_UART_Receive+0x9a>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	22ff      	movs	r2, #255	@ 0xff
 8002886:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800288a:	e01b      	b.n	80028c4 <HAL_UART_Receive+0xd2>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	227f      	movs	r2, #127	@ 0x7f
 8002890:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002894:	e016      	b.n	80028c4 <HAL_UART_Receive+0xd2>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800289e:	d10d      	bne.n	80028bc <HAL_UART_Receive+0xca>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d104      	bne.n	80028b2 <HAL_UART_Receive+0xc0>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	227f      	movs	r2, #127	@ 0x7f
 80028ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028b0:	e008      	b.n	80028c4 <HAL_UART_Receive+0xd2>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	223f      	movs	r2, #63	@ 0x3f
 80028b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80028ba:	e003      	b.n	80028c4 <HAL_UART_Receive+0xd2>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80028ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028d4:	d108      	bne.n	80028e8 <HAL_UART_Receive+0xf6>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	61bb      	str	r3, [r7, #24]
 80028e6:	e003      	b.n	80028f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80028f0:	e037      	b.n	8002962 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	2120      	movs	r1, #32
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 fbb7 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2220      	movs	r2, #32
 800290c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e033      	b.n	800297c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10c      	bne.n	8002934 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002920:	b29a      	uxth	r2, r3
 8002922:	8a7b      	ldrh	r3, [r7, #18]
 8002924:	4013      	ands	r3, r2
 8002926:	b29a      	uxth	r2, r3
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	3302      	adds	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	e00d      	b.n	8002950 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800293a:	b29b      	uxth	r3, r3
 800293c:	b2da      	uxtb	r2, r3
 800293e:	8a7b      	ldrh	r3, [r7, #18]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4013      	ands	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3301      	adds	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1c1      	bne.n	80028f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3720      	adds	r7, #32
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002988:	b08a      	sub	sp, #40	@ 0x28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	431a      	orrs	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	4bb4      	ldr	r3, [pc, #720]	@ (8002c84 <UART_SetConfig+0x300>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029bc:	430b      	orrs	r3, r1
 80029be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4aa9      	ldr	r2, [pc, #676]	@ (8002c88 <UART_SetConfig+0x304>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d004      	beq.n	80029f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ec:	4313      	orrs	r3, r2
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4aa0      	ldr	r2, [pc, #640]	@ (8002c8c <UART_SetConfig+0x308>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d126      	bne.n	8002a5c <UART_SetConfig+0xd8>
 8002a0e:	4ba0      	ldr	r3, [pc, #640]	@ (8002c90 <UART_SetConfig+0x30c>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d81b      	bhi.n	8002a54 <UART_SetConfig+0xd0>
 8002a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <UART_SetConfig+0xa0>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a45 	.word	0x08002a45
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a4d 	.word	0x08002a4d
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a3a:	e080      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a42:	e07c      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002a44:	2304      	movs	r3, #4
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4a:	e078      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a52:	e074      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002a54:	2310      	movs	r3, #16
 8002a56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5a:	e070      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8c      	ldr	r2, [pc, #560]	@ (8002c94 <UART_SetConfig+0x310>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d138      	bne.n	8002ad8 <UART_SetConfig+0x154>
 8002a66:	4b8a      	ldr	r3, [pc, #552]	@ (8002c90 <UART_SetConfig+0x30c>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d82d      	bhi.n	8002ad0 <UART_SetConfig+0x14c>
 8002a74:	a201      	add	r2, pc, #4	@ (adr r2, 8002a7c <UART_SetConfig+0xf8>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ad1 	.word	0x08002ad1
 8002a84:	08002ad1 	.word	0x08002ad1
 8002a88:	08002ad1 	.word	0x08002ad1
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002ad1 	.word	0x08002ad1
 8002a98:	08002ad1 	.word	0x08002ad1
 8002a9c:	08002ab9 	.word	0x08002ab9
 8002aa0:	08002ad1 	.word	0x08002ad1
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	08002ac9 	.word	0x08002ac9
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab6:	e042      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abe:	e03e      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ac6:	e03a      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ace:	e036      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ad6:	e032      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a6a      	ldr	r2, [pc, #424]	@ (8002c88 <UART_SetConfig+0x304>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d12a      	bne.n	8002b38 <UART_SetConfig+0x1b4>
 8002ae2:	4b6b      	ldr	r3, [pc, #428]	@ (8002c90 <UART_SetConfig+0x30c>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002aec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002af0:	d01a      	beq.n	8002b28 <UART_SetConfig+0x1a4>
 8002af2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002af6:	d81b      	bhi.n	8002b30 <UART_SetConfig+0x1ac>
 8002af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002afc:	d00c      	beq.n	8002b18 <UART_SetConfig+0x194>
 8002afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b02:	d815      	bhi.n	8002b30 <UART_SetConfig+0x1ac>
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <UART_SetConfig+0x18c>
 8002b08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b0c:	d008      	beq.n	8002b20 <UART_SetConfig+0x19c>
 8002b0e:	e00f      	b.n	8002b30 <UART_SetConfig+0x1ac>
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b16:	e012      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b1e:	e00e      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002b20:	2304      	movs	r3, #4
 8002b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b26:	e00a      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002b28:	2308      	movs	r3, #8
 8002b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b2e:	e006      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002b30:	2310      	movs	r3, #16
 8002b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b36:	e002      	b.n	8002b3e <UART_SetConfig+0x1ba>
 8002b38:	2310      	movs	r3, #16
 8002b3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a51      	ldr	r2, [pc, #324]	@ (8002c88 <UART_SetConfig+0x304>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d17a      	bne.n	8002c3e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b4c:	2b08      	cmp	r3, #8
 8002b4e:	d824      	bhi.n	8002b9a <UART_SetConfig+0x216>
 8002b50:	a201      	add	r2, pc, #4	@ (adr r2, 8002b58 <UART_SetConfig+0x1d4>)
 8002b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b56:	bf00      	nop
 8002b58:	08002b7d 	.word	0x08002b7d
 8002b5c:	08002b9b 	.word	0x08002b9b
 8002b60:	08002b85 	.word	0x08002b85
 8002b64:	08002b9b 	.word	0x08002b9b
 8002b68:	08002b8b 	.word	0x08002b8b
 8002b6c:	08002b9b 	.word	0x08002b9b
 8002b70:	08002b9b 	.word	0x08002b9b
 8002b74:	08002b9b 	.word	0x08002b9b
 8002b78:	08002b93 	.word	0x08002b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b7c:	f7ff f8ca 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002b80:	61f8      	str	r0, [r7, #28]
        break;
 8002b82:	e010      	b.n	8002ba6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b84:	4b44      	ldr	r3, [pc, #272]	@ (8002c98 <UART_SetConfig+0x314>)
 8002b86:	61fb      	str	r3, [r7, #28]
        break;
 8002b88:	e00d      	b.n	8002ba6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8a:	f7ff f82b 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8002b8e:	61f8      	str	r0, [r7, #28]
        break;
 8002b90:	e009      	b.n	8002ba6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b96:	61fb      	str	r3, [r7, #28]
        break;
 8002b98:	e005      	b.n	8002ba6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ba4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 8107 	beq.w	8002dbc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d305      	bcc.n	8002bca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d903      	bls.n	8002bd2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002bd0:	e0f4      	b.n	8002dbc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	4615      	mov	r5, r2
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	022b      	lsls	r3, r5, #8
 8002be4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002be8:	0222      	lsls	r2, r4, #8
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	6849      	ldr	r1, [r1, #4]
 8002bee:	0849      	lsrs	r1, r1, #1
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4681      	mov	r9, r0
 8002bf6:	eb12 0a08 	adds.w	sl, r2, r8
 8002bfa:	eb43 0b09 	adc.w	fp, r3, r9
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	607a      	str	r2, [r7, #4]
 8002c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c0c:	4650      	mov	r0, sl
 8002c0e:	4659      	mov	r1, fp
 8002c10:	f7fd fadc 	bl	80001cc <__aeabi_uldivmod>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4613      	mov	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c22:	d308      	bcc.n	8002c36 <UART_SetConfig+0x2b2>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c2a:	d204      	bcs.n	8002c36 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]
 8002c34:	e0c2      	b.n	8002dbc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c3c:	e0be      	b.n	8002dbc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c46:	d16a      	bne.n	8002d1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002c48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d834      	bhi.n	8002cba <UART_SetConfig+0x336>
 8002c50:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <UART_SetConfig+0x2d4>)
 8002c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c56:	bf00      	nop
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c9d 	.word	0x08002c9d
 8002c60:	08002ca5 	.word	0x08002ca5
 8002c64:	08002cbb 	.word	0x08002cbb
 8002c68:	08002cab 	.word	0x08002cab
 8002c6c:	08002cbb 	.word	0x08002cbb
 8002c70:	08002cbb 	.word	0x08002cbb
 8002c74:	08002cbb 	.word	0x08002cbb
 8002c78:	08002cb3 	.word	0x08002cb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff f84a 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002c80:	61f8      	str	r0, [r7, #28]
        break;
 8002c82:	e020      	b.n	8002cc6 <UART_SetConfig+0x342>
 8002c84:	efff69f3 	.word	0xefff69f3
 8002c88:	40008000 	.word	0x40008000
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40004400 	.word	0x40004400
 8002c98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c9c:	f7ff f850 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8002ca0:	61f8      	str	r0, [r7, #28]
        break;
 8002ca2:	e010      	b.n	8002cc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	@ (8002dd8 <UART_SetConfig+0x454>)
 8002ca6:	61fb      	str	r3, [r7, #28]
        break;
 8002ca8:	e00d      	b.n	8002cc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002caa:	f7fe ff9b 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8002cae:	61f8      	str	r0, [r7, #28]
        break;
 8002cb0:	e009      	b.n	8002cc6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cb6:	61fb      	str	r3, [r7, #28]
        break;
 8002cb8:	e005      	b.n	8002cc6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002cc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d077      	beq.n	8002dbc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005a      	lsls	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	441a      	add	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d916      	bls.n	8002d16 <UART_SetConfig+0x392>
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cee:	d212      	bcs.n	8002d16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	f023 030f 	bic.w	r3, r3, #15
 8002cf8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	8afb      	ldrh	r3, [r7, #22]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	8afa      	ldrh	r2, [r7, #22]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	e052      	b.n	8002dbc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002d1c:	e04e      	b.n	8002dbc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d827      	bhi.n	8002d76 <UART_SetConfig+0x3f2>
 8002d26:	a201      	add	r2, pc, #4	@ (adr r2, 8002d2c <UART_SetConfig+0x3a8>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d51 	.word	0x08002d51
 8002d30:	08002d59 	.word	0x08002d59
 8002d34:	08002d61 	.word	0x08002d61
 8002d38:	08002d77 	.word	0x08002d77
 8002d3c:	08002d67 	.word	0x08002d67
 8002d40:	08002d77 	.word	0x08002d77
 8002d44:	08002d77 	.word	0x08002d77
 8002d48:	08002d77 	.word	0x08002d77
 8002d4c:	08002d6f 	.word	0x08002d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d50:	f7fe ffe0 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8002d54:	61f8      	str	r0, [r7, #28]
        break;
 8002d56:	e014      	b.n	8002d82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d58:	f7fe fff2 	bl	8001d40 <HAL_RCC_GetPCLK2Freq>
 8002d5c:	61f8      	str	r0, [r7, #28]
        break;
 8002d5e:	e010      	b.n	8002d82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d60:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <UART_SetConfig+0x454>)
 8002d62:	61fb      	str	r3, [r7, #28]
        break;
 8002d64:	e00d      	b.n	8002d82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d66:	f7fe ff3d 	bl	8001be4 <HAL_RCC_GetSysClockFreq>
 8002d6a:	61f8      	str	r0, [r7, #28]
        break;
 8002d6c:	e009      	b.n	8002d82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d72:	61fb      	str	r3, [r7, #28]
        break;
 8002d74:	e005      	b.n	8002d82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d80:	bf00      	nop
    }

    if (pclk != 0U)
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d019      	beq.n	8002dbc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	085a      	lsrs	r2, r3, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	441a      	add	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	d909      	bls.n	8002db6 <UART_SetConfig+0x432>
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da8:	d205      	bcs.n	8002db6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60da      	str	r2, [r3, #12]
 8002db4:	e002      	b.n	8002dbc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002dc8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3728      	adds	r7, #40	@ 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00f42400 	.word	0x00f42400

08002ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	f003 0320 	and.w	r3, r3, #32
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eda:	d10a      	bne.n	8002ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b098      	sub	sp, #96	@ 0x60
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002f30:	f7fd fe38 	bl	8000ba4 <HAL_GetTick>
 8002f34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d12e      	bne.n	8002fa2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f88c 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d021      	beq.n	8002fa2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e6      	bne.n	8002f5e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2220      	movs	r2, #32
 8002f94:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e062      	b.n	8003068 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d149      	bne.n	8003044 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fb0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f856 	bl	8003070 <UART_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03c      	beq.n	8003044 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	e853 3f00 	ldrex	r3, [r3]
 8002fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ff0:	e841 2300 	strex	r3, r2, [r1]
 8002ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1e6      	bne.n	8002fca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	3308      	adds	r3, #8
 8003002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	e853 3f00 	ldrex	r3, [r3]
 800300a:	60fb      	str	r3, [r7, #12]
   return(result);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0301 	bic.w	r3, r3, #1
 8003012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3308      	adds	r3, #8
 800301a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800301c:	61fa      	str	r2, [r7, #28]
 800301e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003020:	69b9      	ldr	r1, [r7, #24]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	e841 2300 	strex	r3, r2, [r1]
 8003028:	617b      	str	r3, [r7, #20]
   return(result);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1e5      	bne.n	8002ffc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e011      	b.n	8003068 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2220      	movs	r2, #32
 800304e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3758      	adds	r7, #88	@ 0x58
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003080:	e04f      	b.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003088:	d04b      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800308a:	f7fd fd8b 	bl	8000ba4 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	429a      	cmp	r2, r3
 8003098:	d302      	bcc.n	80030a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e04e      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d037      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b80      	cmp	r3, #128	@ 0x80
 80030b6:	d034      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d031      	beq.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f003 0308 	and.w	r3, r3, #8
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d110      	bne.n	80030ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2208      	movs	r2, #8
 80030d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f838 	bl	800314a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2208      	movs	r2, #8
 80030de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e029      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030fc:	d111      	bne.n	8003122 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f81e 	bl	800314a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e00f      	b.n	8003142 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	69da      	ldr	r2, [r3, #28]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	429a      	cmp	r2, r3
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	429a      	cmp	r2, r3
 800313e:	d0a0      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800314a:	b480      	push	{r7}
 800314c:	b095      	sub	sp, #84	@ 0x54
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003170:	643b      	str	r3, [r7, #64]	@ 0x40
 8003172:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800317e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e6      	bne.n	8003152 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	3308      	adds	r3, #8
 800318a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	e853 3f00 	ldrex	r3, [r3]
 8003192:	61fb      	str	r3, [r7, #28]
   return(result);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3308      	adds	r3, #8
 80031a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80031a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e5      	bne.n	8003184 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d118      	bne.n	80031f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	e853 3f00 	ldrex	r3, [r3]
 80031cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f023 0310 	bic.w	r3, r3, #16
 80031d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	613b      	str	r3, [r7, #16]
   return(result);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e6      	bne.n	80031c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003206:	bf00      	nop
 8003208:	3754      	adds	r7, #84	@ 0x54
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <memset>:
 8003212:	4402      	add	r2, r0
 8003214:	4603      	mov	r3, r0
 8003216:	4293      	cmp	r3, r2
 8003218:	d100      	bne.n	800321c <memset+0xa>
 800321a:	4770      	bx	lr
 800321c:	f803 1b01 	strb.w	r1, [r3], #1
 8003220:	e7f9      	b.n	8003216 <memset+0x4>
	...

08003224 <__libc_init_array>:
 8003224:	b570      	push	{r4, r5, r6, lr}
 8003226:	4d0d      	ldr	r5, [pc, #52]	@ (800325c <__libc_init_array+0x38>)
 8003228:	4c0d      	ldr	r4, [pc, #52]	@ (8003260 <__libc_init_array+0x3c>)
 800322a:	1b64      	subs	r4, r4, r5
 800322c:	10a4      	asrs	r4, r4, #2
 800322e:	2600      	movs	r6, #0
 8003230:	42a6      	cmp	r6, r4
 8003232:	d109      	bne.n	8003248 <__libc_init_array+0x24>
 8003234:	4d0b      	ldr	r5, [pc, #44]	@ (8003264 <__libc_init_array+0x40>)
 8003236:	4c0c      	ldr	r4, [pc, #48]	@ (8003268 <__libc_init_array+0x44>)
 8003238:	f000 f818 	bl	800326c <_init>
 800323c:	1b64      	subs	r4, r4, r5
 800323e:	10a4      	asrs	r4, r4, #2
 8003240:	2600      	movs	r6, #0
 8003242:	42a6      	cmp	r6, r4
 8003244:	d105      	bne.n	8003252 <__libc_init_array+0x2e>
 8003246:	bd70      	pop	{r4, r5, r6, pc}
 8003248:	f855 3b04 	ldr.w	r3, [r5], #4
 800324c:	4798      	blx	r3
 800324e:	3601      	adds	r6, #1
 8003250:	e7ee      	b.n	8003230 <__libc_init_array+0xc>
 8003252:	f855 3b04 	ldr.w	r3, [r5], #4
 8003256:	4798      	blx	r3
 8003258:	3601      	adds	r6, #1
 800325a:	e7f2      	b.n	8003242 <__libc_init_array+0x1e>
 800325c:	080032d4 	.word	0x080032d4
 8003260:	080032d4 	.word	0x080032d4
 8003264:	080032d4 	.word	0x080032d4
 8003268:	080032d8 	.word	0x080032d8

0800326c <_init>:
 800326c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326e:	bf00      	nop
 8003270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003272:	bc08      	pop	{r3}
 8003274:	469e      	mov	lr, r3
 8003276:	4770      	bx	lr

08003278 <_fini>:
 8003278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327a:	bf00      	nop
 800327c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800327e:	bc08      	pop	{r3}
 8003280:	469e      	mov	lr, r3
 8003282:	4770      	bx	lr
